
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: dev_nb/Fingerprinter.ipynb

import numpy as np
from rdkit import Chem
from rdkit.Chem.AllChem import GetMACCSKeysFingerprint
from descriptastorus.descriptors import DescriptorGenerator, MorganCounts, Morgan, RDKit2D, RDKitFPBits, FeatureMorganCounts, FeatureMorgan, AtomPair, AtomPairCounts

class MACCSGenerator(DescriptorGenerator):
    """Computes MACCS bitvector"""
    NAME = "MACCS"
    def __init__(self):

        DescriptorGenerator.__init__(self)
        # specify names and numpy types for all columns
        maccs = [("maccs-%d"%d, np.uint8) for d in range(166)]
        self.columns += maccs

    def calculateMol(self, m, smiles, internalParsing=False):
        counts = list(GetMACCSKeysFingerprint(m))[1: ]
        return counts


class Fingerprinter():
    def __init__(self, smiles):
        self.smiles = smiles


    def _define_generators(self, gen, **kwargs):

        '''Define feature generator.

        Arguments:
        gen : str
            Name of the generator to use. Options:

            ecfp : Morgan fingerprints (extended connectivity fingerprint)
            fcfp : Feature-based Morgan fingerprints (functional connectivity fingerprint)
            atom_pairs : Atom pairs as defined in https://pubs.acs.org/doi/10.1021/ci00046a002

        nbits : int
            Final number of bits in the fingerprint

        radius : int
            Radius around central atom to calculate Morgan fingerprints'''

        radius = kwargs.get('radius', 3)
        nbits = kwargs.get('nbits', 2048)


        if gen == 'ecfp':
            feature_generator = Morgan(radius=radius,nbits=nbits)

        elif gen == 'atom_pairs':
            feature_generator = AtomPairCounts(nbits=nbits)

        elif gen == 'fcfp':
            feature_generator = FeatureMorgan(radius=radius,nbits=nbits)

        elif gen == 'maccs':
            feature_generator = MACCSGenerator()

        return feature_generator


    def generate_fingerprint(self, gen, **kwargs):
        '''Calculate features for a list of SMILES using a feature generator.

        Arguments:
        gen : str
            Name of the generator to use. Options:

            ecfp : Morgan fingerprints (extended connectivity fingerprint)
            fcfp : Feature-based Morgan fingerprints (functional connectivity fingerprint)
            atom_pairs : Atom pairs as defined in https://pubs.acs.org/doi/10.1021/ci00046a002


        nbits : int
            Final number of bits in the fingerprint

        radius : int
            Radius around central atom to calculate Morgan fingerprints'''

        if not isinstance(gen, str):
            raise TypeError('Please provide a string that represents a valid generator name.')

        if gen not in ['maccs','ecfp', 'fcfp', 'atom_pairs','maccs']:
            raise ValueError("Please provide a valid generator. Viable options are: 'maccs','ecfp', 'fcfp', 'atom_pairs'")


        feature_generator = self._define_generators(gen=gen, **kwargs)
        return np.array(feature_generator.processSmiles(self.smiles)[1])[:, 1:]


    def __len__(self):
        return len(self.smiles)

    def __getitem__(self, i):
        return self.smiles[i]

    def __str__(self):
        return 'Size of SMILES dataset: {}\nFirst SMILES: {}'.format(len(self.smiles), self.smiles[0])
