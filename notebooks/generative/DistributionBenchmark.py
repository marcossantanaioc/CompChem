
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: dev_nb/Generative_validation.ipynb
from .generative_basics import *
from .exp.Filtering import *
from fcd_torch import *
from guacamol.distribution_learning_benchmark import ValidityBenchmark, UniquenessBenchmark, NoveltyBenchmark
from guacamol.distribution_matching_generator import DistributionMatchingGenerator
from tqdm.notebook import tqdm

def validity_score(mols):
    gen = MockGenerator(mols)
    benchmark = ValidityBenchmark(number_samples=len(mols))
    return benchmark.assess_model(gen).score
    

def uniqueness_score(mols):
    gen = MockGenerator(mols)
    benchmark = UniquenessBenchmark(number_samples=len(mols))
    return benchmark.assess_model(gen).score

def novelty_score(mols,ref_mols): 
    gen = MockGenerator(mols)
    benchmark = NoveltyBenchmark(number_samples=len(mols), training_set=ref_mols)
    return benchmark.assess_model(gen).score

def temperature_dict(temps):
    return {j:[] for j in temps}

hook_function = lambda m,i,o: o

class MockGenerator(DistributionMatchingGenerator):
    """
    Mock generator that returns pre-defined molecules,
    possibly split in several calls
    """

    def __init__(self, molecules) -> None:
        self.molecules = molecules
        self.cursor = 0

    def generate(self, number_samples: int):
        end = self.cursor + number_samples

        sampled_molecules = self.molecules[self.cursor:end]
        self.cursor = end
        return sampled_molecules
    

@patch
@delegates(MolSampler)
def generative_benchmark(x:MolSampler, temperatures=[1.0], max_size:int=100, max_mols:int=500, iterations:int=3, ref_mols=[], **kwargs):
    '''Runs the generative benchmark for a collection of temperatures. For each temperature value, samples
    max_mols SMILES with size max_size for a given number of iterations
    temperatures : collection of temperatures
    max_size : maximum size of the SMILES strings (default = 100)
    max_mols : maximum number of SMILES to generate (default = 500)
    iterations: number of iterations to run the benchmark (default = 3)'''

    
    if not isinstance(temperatures, list): raise TypeError('Temperatures must be a list.')
    if not isinstance(ref_mols, list): raise TypeError('Must provide a list of reference molecules.')
        
    _validity = temperature_dict(temperatures)
    _novelty = temperature_dict(temperatures)
    _uniqueness = temperature_dict(temperatures)

    for t in temperatures:
        print(f'Sampling with temperature {t}')

        for _ in tqdm(range(iterations), total=iterations,leave=True,position=0):
            generated_mols = x.generate_mols(max_size=max_size, max_mols=max_mols, temperature=t)
    
            
            _novelty[t].append(novelty_score(generated_mols, ref_mols))
            _uniqueness[t].append(uniqueness_score(generated_mols))
            _validity[t].append(validity_score(generated_mols))
            
            print(_validity[t], _novelty[t], _uniqueness[t])
            
    return list(map(pd.DataFrame, [_validity, _novelty, _uniqueness]))