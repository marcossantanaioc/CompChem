
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: dev_nb/LSTMGradCam_class.ipynb
from PIL import Image
from IPython.display import SVG
from rdkit.Chem import MolFromSmiles, MolToSmiles
from fastai.text.all import *
from utils.custom_losses import *
from utils.custom_metrics import *
from generative.Tokenizer import *
from exp.chem import *
from rdkit import Chem, DataStructs
from rdkit.Chem.Draw import IPythonConsole, rdMolDraw2D
from fastai.callback.hook import *

_irrelevant_symbols = ['#','=', '(',')', '/', '\\', '-', '+','xxbos','xxpad']

_num_symbols = [f'{i}' for i in range(10)]
_symbols_tot = _irrelevant_symbols + _num_symbols


def get_bond_idx(mol, ref_index):
    '''Utility function to highlight important atoms and bonds using RDKit drawing code.
    Returns the index of bonds between two atoms in a molecule using an array as reference.
    The reference array contains the indices of the relevant atoms.

    mol :: RDKit mol object
    ref_index  :: Reference array
    '''
    allbonds = [(x.GetBeginAtomIdx(), x.GetEndAtomIdx()) for x in mol.GetBonds()]
    bonded_pairs = [mol.GetBondBetweenAtoms(*x).GetIdx() for x in allbonds if (x[0] in ref_index) and (x[1] in ref_index)]
    return bonded_pairs


def tok2idx(tok):
    assert MolFromSmiles(''.join(tok.split()[1:])) != None

    toks_idx = [(i,x) for i,x in enumerate(tok.split())]
    filtered_toks = [x[0] for x in toks_idx if x[1] not in _symbols_tot] # Atom-only embedding indices

    return filtered_toks

def get_pixel_value(pixels):
    return tuple([i/255 for i in pixels])

def show_png(data):
    bio = io.BytesIO(data)
    img = Image.open(bio)
    return img

class LSTMGradCam():
    def __init__(self, learner, layer):
        self.learner = learner
        self.layer = layer

@patch
@delegates(LSTMGradCam)
def lstm_gradcam(x:LSTMGradCam, smiles:str='', class_id:int=0,image=True, return_embeddings = False, **kwargs):
    hook_function = lambda m,i,o: o

    # Encode batch
    dl = x.learner.dls.test_dl([smiles])
    batch = next(iter(dl))[0]
    targ = torch.ones(1, 1) # Fake target. Just a small hack to create a batch and decode it later

    # Decode batch
    bb = *tuplify(batch), *tuplify(targ)
    tok, _ = x.learner.dls.decode_batch(bb)[0]

   # print(tok)
    with Hook(x.layer, hook_function, is_forward=False) as hookg:
        with Hook(x.layer, hook_function, is_forward=True) as hook:
            output = x.learner.model.eval()(batch)[0][0].sigmoid()[class_id]
            act = hook.stored[0]
        output.backward()
        grad = hookg.stored

    # LSTM GradCam
    w = grad[0].mean(dim=2,keepdim=True) # Global average pooling to obtain weights

    embeddings = act.squeeze(0)
    mult = (w.squeeze(0) * embeddings).sum(1)
    cam_map = F.relu(mult)

    mol_idx = tok2idx(tok) # Atoms-only idx from the tokens
    
    if return_embeddings:

        return cam_map, embeddings, mult, mol_idx
    return cam_map, embeddings, mult, mol_idx


def plot_atom_importance(smiles, weights,fname='molecule.png', img_size=(400,400)):
    mol = MolFromSmiles(smiles)
    atom_index = weights.numpy().nonzero()[0].tolist() # Non-zero weights
    bond_pairs = get_bond_idx(mol, atom_index)
    colors = [get_pixel_value((255,165,0)),get_pixel_value((0,255,255))] #orange, cyan

################### If showing negative contributions too ##########################################
#     athighlights = defaultdict(list)                                                        
#     bndhighlights = defaultdict(list)
#     arads = {}
#
#     for i,atom in enumerate(mol.GetAtoms()):
#         if weights[i]<=0:
#             athighlights[i].append(colors[0])
#         else:
#             athighlights[i].append(colors[1])
#
#     for x in mol.GetBonds():
#         begin_atom = x.GetBeginAtomIdx()
#         end_atom = x.GetEndAtomIdx()
#         if weights[begin_atom]<=0. or weights[end_atom]<=0.:
#             bndhighlights[mol.GetBondBetweenAtoms(begin_atom,end_atom).GetIdx()].append(colors[0])
#         else:
#             bndhighlights[mol.GetBondBetweenAtoms(begin_atom,end_atom).GetIdx()].append(colors[1])
###################################################################################################            
    d2d = Draw.MolDraw2DCairo(*img_size)
    d2d.drawOptions().setHighlightColour(colors[1])
    d2d.DrawMolecule(mol,highlightAtoms=atom_index,highlightBonds=bond_pairs)

    #d2d.DrawMoleculeWithHighlights(mol,'',dict(athighlights),dict(bndhighlights),{},{})
    d2d.FinishDrawing()
    f=show_png(d2d.GetDrawingText())
    f.save(fname)