
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: dev_nb/Finetuning_LM.ipynb

from rdkit.Chem import AllChem, DataStructs, MolFromSmiles, MolToSmiles, MolFromSmarts, Draw
from rdkit.Chem.Scaffolds import MurckoScaffold
from rdkit import Chem
from rdkit.Chem.Descriptors import MolWt, MolLogP, NumHDonors, NumHAcceptors, TPSA
from rdkit.Chem.rdMolDescriptors import CalcNumRotatableBonds
from rdkit import Chem
from rdkit.Chem import RDConfig
from rdkit.Chem.FilterCatalog import *
#from fastcore.basics import *
#from fastcore.foundation import L
#fromf fastcore.meta import *
import os
import sys
sys.path.append(os.path.join(RDConfig.RDContribDir, 'SA_Score'))
import sascorer


def randomize_smiles(smi): return MolToSmiles(MolFromSmiles(smi),doRandom=True,canonical=False)

def smiles_augmentation(df=None,smiles_column='processed_smiles', N_rounds=2):
    cols = [c for c in df.columns if c != smiles_column]
    dist_aug = {'aug_smiles' : []}


    duplicated_df = df[cols].append([df[cols]]*(N_rounds-1),ignore_index=False)
    
    for i in range(df.shape[0]):      
        for _ in range(N_rounds):
            dist_aug['aug_smiles'].append(randomize_smiles(df.iloc[i][smiles_column]))
            
    assert len(dist_aug['aug_smiles']) == duplicated_df.shape[0]
    duplicated_df.sort_index(inplace=True)
    if len(duplicated_df.columns) < 1: 
        duplicated_df.insert(loc=0, column=smiles_column, value=dist_aug['aug_smiles'])
    else: 
        duplicated_df.insert(loc=1, column=smiles_column, value=dist_aug['aug_smiles'])

    
    return duplicated_df.reset_index(drop=True)
