
#################################################
### THIS FILE WAS AUTOGENERATED! DO NOT EDIT! ###
#################################################
# file to edit: dev_nb/Finetuning_LM.ipynb

from .rdkit_basics import *
from ..generative_basics import *
from typing import List, Dict, Collection
import datetime
from datetime import date

convert2mol = lambda x : MolFromSmiles(x)
def _pains():
    '''Define PAINS substructures'''
    params = FilterCatalogParams()
    params.AddCatalog(FilterCatalogParams.FilterCatalogs.PAINS_A)
    params.AddCatalog(FilterCatalogParams.FilterCatalogs.PAINS_B)
    params.AddCatalog(FilterCatalogParams.FilterCatalogs.PAINS_C)
    catalog = FilterCatalog(params)
    return catalog

    
def gen_id(data,prefix=None):

    if not prefix: prefix = 'mol'
    today = date.today()
    now = datetime.datetime.now()
    dt_string = now.strftime("%d/%m/%Y %H:%M:%S").replace(' ','-')
    data['Id'] = [f'{prefix}-{x}-{dt_string}' for x in range(data.shape[0])]
    data['timestamp'] = dt_string
    return data


def calculate_descriptors(smiles:str):
    
    '''Calculate physicochemical properties for a collection of molecules'''
    
    desc_name = ['Smiles','MW', 'LogP', 'HBD', 'HBA',
            'Rot', 'TPSA', 'charge',
            'HAC', 'Rings', 'SAScore', 'PAINS_FILTER']
    
    mol = MolFromSmiles(smiles)

    if mol:
        desc_list = [smiles, MolWt(mol), MolLogP(mol), NumHDonors(mol), 
                     NumHAcceptors(mol), CalcNumRotatableBonds(mol), TPSA(mol),
                    Chem.rdmolops.GetFormalCharge(mol), Chem.rdchem.Mol.GetNumHeavyAtoms(mol),
                     Chem.rdMolDescriptors.CalcNumRings(mol),
                    sascorer.calculateScore(mol), None]
        
    desc_df = pd.DataFrame(desc_list,index=desc_name).T

    return desc_df

class Filtering():
    '''Prototype to filter a collection of molecules based on physicochemical rules-of-thumb and PAINS filters
    
    **** Implemented rules ****
    
    1) Astex Rule of Three: The Rule of Three (Ro3) was designed to prioritize small molecular fragments. DOI: 10.1016/S1359-6446(03)02831-9
    
    2) Lipinski's Rule of Five: The Rule of Five (Ro5) is a rule of thumb to evaluate druglikeness or determine if a chemical compound with a certain pharmacological or biological activity has chemical properties and physical properties that would make it a likely orally active drug in humans. DOI: 10.1016/S0169-409X(00)00129-0
    
    
    The Pan Assay Interference Compounds (PAINS) filter was implemented as SMARTS representations of the original SLN structures described by Bael et al. DOI: 10.1021/jm901137j
      
    '''
  
    def __init__(self,  **kwargs):

        self.default_rule_dict = {"MW": [0, 300],
                                "LogP": [-5, 5],
                                "HBD": [0, 3],
                                "HBA": [0, 3],
                                "TPSA": [0, 70],
                                "Rot": [0, 5]}
        self.params = _pains()
        

@patch
@delegates(Filtering)
def evaluate(x:Filtering, mol, **kwargs):

    return calculate_descriptors(mol)

@patch
@delegates(Filtering)
def physicochemical_filter(x:Filtering, data, rules:Dict, **kwargs):
    df_ok = data[data.SAScore.between(*rules["SAScore"]) &
    data.MW.between(*rules["MW"]) &
    data.LogP.between(*rules["LogP"]) &
    data.HBD.between(*rules["HBD"]) &
    data.HBA.between(*rules["HBA"]) &
    data.TPSA.between(*rules["TPSA"]) &
    data.Rot.between(*rules["Rot"]) 
    ]
    return df_ok

@patch
@delegates(Filtering)
def pains_filter(x:Filtering, mol, **kwargs):
    
    if not isinstance(mol, Chem.rdchem.Mol): mol = MolFromSmiles(mol)

    '''Identify PAINS among a set of molecules'''
    if not mol: pass
    
    assert x.params.GetNumEntries() == 480
    
    entry = x.params.GetFirstMatch(mol)

    if entry:
        name = entry.GetDescription()
       # print(f'Found PAINS! {name}')

        return name

    return None

@patch
@delegates(Filtering)
def __call__(x:Filtering, mols, smiles_column='Smiles', prefix = None, rules = None, **kwargs):

    
    df = pd.concat(map(calculate_descriptors,mols))
    df = gen_id(df,prefix=prefix)
    
    unfiltered = df.copy()
    
    if rules == None: df = x.physicochemical_filter(df, x.default_rule_dict)
        
    df = x.physicochemical_filter(df, rules)

    df.loc[:, 'PAINS_FILTER'] = df[smiles_column].apply(x.pains_filter)
    
    filtered = df[df['PAINS_FILTER'].isnull()]
    
    return unfiltered, filtered